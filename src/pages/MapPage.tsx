import { useEffect, useState } from "react";
import Graph from "../components/Graph/Graph";
import SidebarNodes from "../components/SidebarNodes/SidebarNodes";
import type { NodeData, EdgeData } from "../components/Graph/Graph";

import {
    header,
    title,
    subtitle,
    graphArea,
    loadingText,
} from "./MapStyles";

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

export default function MapPage() {
    const [nodes, setNodes] = useState<(NodeData & { level: number })[]>([]);
    const [edges, setEdges] = useState<EdgeData[]>([]);
    const [loading, setLoading] = useState(true);
    const [activeNodeId, setActiveNodeId] = useState<number | null>(null); // üîπ –î–ª—è –ø—ñ–¥—Å–≤—ñ—Ç–∫–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—É–∑–ª–∞

    useEffect(() => {
        const fetchData = async () => {
            try {
                const token = localStorage.getItem("token");

                const res = await fetch(`${API_BASE_URL}/nodes/graph`, {
                    headers: { Authorization: `Bearer ${token}` },
                });

                const data = await res.json();

                // –ú–∞–ø–∏–º–æ, —â–æ–± —É –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞ —Ç–æ—á–Ω–æ –±—É–≤ label
                const formattedNodes = data.nodes.map((node: any) => ({
                    ...node,
                    label: node.title || `–í—É–∑–æ–ª ${node.id}`,
                }));

                setNodes(formattedNodes);
                setEdges(data.edges);
            } catch (err) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—É:", err);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    return (
        <div className="flex min-h-screen">
            <SidebarNodes
                nodes={nodes}
                activeNodeId={activeNodeId}
                onSidebarNodeClick={(id) => {
                    setActiveNodeId(id);
                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è –≤—É–∑–ª–∞ –≤ –≥—Ä–∞—Ñ—ñ
                    window.__focusGraphNode?.(id);
                }}
            />
            <div className="flex-1 flex flex-col">
                <div className={header}>
                    <h1 className={title}>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ –∑–Ω–∞–Ω—å</h1>
                    <p className={subtitle}>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—É–∑–ª–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Ç–µ–º</p>
                </div>
                <div className={graphArea}>
                    {loading ? (
                        <div className={loadingText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—É...</div>
                    ) : (
                        <Graph
                            nodes={nodes}
                            edges={edges}
                            onNodeClick={(id) => {
                                setActiveNodeId(id);
                            }}
                        />
                    )}
                </div>
            </div>
        </div>
    );
}
